all.follow.info <- merge(number.following, number.followers, by.x = id.name, by.y = connection.id.name)
imbalanced.users <- all.follow.info[(`Number Following` + 100) < `Number Followers`]
percent.imbalanced <- imbalanced.users[,.N]/profiles[,.N]*100
round.numerics(percent.imbalanced, num.digits)
question.counter <- question.counter + 1
start.date <- ymd_hms('2017-01-01 00:00:00')
end.date <- ymd_hms('2017-01-07 23:59:59')
num.unique.users <- length(unique(registrations[, get(id.name)]))
active.users <- registrations[get(registration.time.name) >= start.date & get(registration.time.name) <= end.date,]
num.active.users <- length(unique(active.users[, get(id.name)]))
percent.active.users <- round.numerics(100*num.active.users/num.unique.users, num.digits)
percent.active.users
question.counter <- question.counter + 1
start.time <- '00:00:00'
end.time <- '05:59:59'
registrations[, time.of.day := format(get(registration.time.name), format="%H:%M:%S")]
midnight.oil <- registrations[time.of.day >= start.time & time.of.day <= end.time]
percent.midnight.oil <- round.numerics(100*midnight.oil[,.N]/registrations[,.N], num.digits)
percent.midnight.oil
question.counter <- question.counter + 1
registrations[, half.year.past := ymd_hms(get(first.registration.name)) + days(183)]
registrations[, seven.day.window := ymd_hms(get(first.registration.name)) + days(190)]
retained.users <- registrations[get(registration.time.name) >= half.year.past & get(registration.time.name) < seven.day.window]
num.retained.users <- length(unique(retained.users[, get(id.name)]))
percent.retained <- round.numerics(100*num.retained.users/num.unique.users, num.digits)
percent.retained
question.counter <- question.counter + 1
retained.users.ids <- unique(retained.users[, get(id.name)])
non.retained.users <- registrations[!(get(id.name) %in% retained.users.ids)]
false.positives <- non.retained.users[get(registration.time.name) >= seven.day.window]
false.positives.ids <- unique(false.positives[, get(id.name)])
num.non.retained <- length(unique(non.retained.users[, get(id.name)]))
percent.false.positives <- round.numerics(100*length(false.positives.ids)/num.non.retained, 4)
percent.false.positives
View(connections)
View(profiles)
retained.users.ids <- unique(retained.users[, get(id.name)])
non.retained.users <- registrations[!(get(id.name) %in% retained.users.ids)]
false.positives <- non.retained.users[get(registration.time.name) >= seven.day.window]
false.positives.ids <- unique(false.positives[, get(id.name)])
num.non.retained <- length(unique(non.retained.users[, get(id.name)]))
percent.false.positives <- round.numerics(100*length(false.positives.ids)/num.non.retained, 4)
percent.false.positives
cuts.num.photos <- c(24, 49, 99, 249, 499)
num.photos.name <- "Num Photos Group"
profiles[, eval(num.photos.name) := cut2(x = num_photos, cuts = cuts.num.photos)]
View(profiles)
cuts.num.photos <- c(25, 50, 100, 250, 500)
profiles[, eval(num.photos.name) := cut2(x = num_photos, cuts = cuts.num.photos)]
View(profiles)
View(registrations)
early.registrations <- registrations[get(registration.time.name) <= seven.days.past]
View(early.registrations)
early.registrations <- early.registrations[, .N, by = id.name]
early.registrations <- registrations[get(registration.time.name) <= seven.days.past]
early.registrations <- early.registrations[, `Avg. Daily Registrations` := .N/7, by = id.name]
View(early.registrations)
early.registrations <- registrations[get(registration.time.name) <= seven.days.past]
early.registrations <- early.registrations[, .N, by = id.name]
View(early.registrations)
early.registrations <- early.registrations[, N/7]
early.registrations <- registrations[get(registration.time.name) <= seven.days.past]
early.registrations <- early.registrations[, .N, by = id.name]
early.registrations <- early.registrations[, `Avg. Daily Registrations` := N/7]
early.registrations$N <- NULL
profiles <- merge(profiles, early.registrations, by.x = id.name, by.y = id.name, all = TRUE)
number.connected <- connections[, .N, by = id.name]
View(number.connected)
View(number.followers)
View(number.following)
profiles <- merge(profiles, number.following, by.x = id.name, by.y = id.name, all = TRUE)
View(connections)
connections[get(connection.id.name) == '0009g7fE', .N]
profiles <- merge(profiles, number.followers, by.x = id.name, by.y = id.name, all = TRUE)
profiles <- merge(profiles, number.followers, by.x = id.name, by.y = connection.id.name, all = TRUE)
retained.users.ids
length(retained.users.ids)
length(non.retained.users)
non.retained.users[, .N]
length(unique(non.retained.users[, get(id.name)]))
non.retained.users.ids <- unique(non.retained.users[, get(id.name)])
non.retained.users.ids
length(non.retained.users.ids)
intersect(retained.users.ids, non.retained.users.ids)
intersect(retained.users.ids, retained.users.ids)
profiles$retention <- ifelse(profiles$id %in% retained.users, "yes", "no")
profiles$retention <- ifelse(profiles$id %in% retained.users.ids, "yes", "no")
profiles[retention == 'yes', .N]
profiles[retention == 'np', .N]
profiles[retention == 'no', .N]
mod <- glm(formula = retention~density+age_group+gender+`Num Photos Group`+`Avg. Daily Registrations`+`Number Following`+`Number Followers`, family = "binomial", data = profiles)
# creating target column
profiles$retention <- ifelse(profiles$id %in% retained.users.ids, 1, 0)
sum(profiles$retention)
mod <- glm(formula = retention~density+age_group+gender+`Num Photos Group`+`Avg. Daily Registrations`+`Number Following`+`Number Followers`, family = "binomial", data = profiles)
glm.coefs <- as.data.table(summary(glm.mod)$coefficients, keep.rownames = TRUE)
glm.coefs <- as.data.table(summary(mod)$coefficients, keep.rownames = TRUE)
alpha = 0.05
z <- qnorm(p = 1-alpha/2, mean = 0, sd = 1)
glm.coefs[, Odds.Ratio := exp(Estimate)]
glm.coefs[, OR.Lower.95 := exp(Estimate - z * `Std. Error`)]
glm.coefs[, OR.Upper.95 := exp(Estimate + z * `Std. Error`)]
glm.coefs[]
datatable(glm.coefs[])
mod.summary <- glm.coefs[]
mod.summary.rounded <- mod.summary[, lapply(X = .SD, FUN = "round.numerics", digits = 3)]
datatable(mod.summary.rounded)
library(data.table)
library(tidyverse)
library(extracat)
library(lubridate)
all.data <- fread("Data/NYCRealEstateFullData.csv")
avg.sale.price.by <- function(data, by.column.names){
mean.price <- data[, .(`Avg. Price` = mean(get(sale.price.name), na.rm=TRUE)), by = by.column.names]
return (mean.price)
}
old.borough.name <- "BOROUGH"
borough.name <- "Fixed Borough"
neighborhood.name <- "NEIGHBORHOOD"
building.class.name <- "BUILDING CLASS CATEGORY"
tax.class.name <- "TAX CLASS AT PRESENT"
block.name <- "BLOCK"
lot.name <- "LOT"
easement.name <- "EASE-MENT"
building.class.present.name <- "BUILDING CLASS AT PRESENT"
address.name <- "ADDRESS"
apartment.number.name <- "APARTMENT NUMBER"
zip.name <- "ZIP CODE"
residential.name <- "RESIDENTIAL UNITS"
commercial.name <- "COMMERCIAL UNITS"
total.units.name <- "TOTAL UNITS"
land.square.feet.name <- "LAND SQUARE FEET"
gross.square.feet.name <- "GROSS SQUARE FEET"
year.built.name <- "YEAR BUILT"
tax.class.sale.name <- "TAX CLASS AT TIME OF SALE"
building.class.sale.name <- "BUILDING CLASS AT TIME OF SALE"
sale.price.name <- "SALE PRICE"
sale.date.name <- "SALE DATE"
sale.year.name <- "Sale Year"
log.price.name <- "Log Price"
colSums(is.na(all.data))
visna(all.data, sort = "b")
all.data$`EASE-MENT` <- NULL
all.data$`APARTMENT NUMBER` <- NULL
all.data[get(sale.price.name) == 0, .N]
all.data[get(sale.price.name) < 50000, .N]
# also taking the log for future graphing
all.data <- all.data[, `Log Price` := log(get(sale.price.name))]
dat <- all.data[get(sale.price.name) > 50000]
dat <- dat[, `Sale Year` := year(get(sale.date.name))]
mean.year.price <- avg.sale.price.by(dat, c(sale.year.name))
setorderv(x = mean.year.price, cols = "Sale Year", order = 1)
year.price.plot <- ggplot(mean.year.price, aes(`Sale Year`, as.integer(`Avg. Price`))) +
geom_line(size = 1) + geom_point(aes(`Sale Year`,as.integer(`Avg. Price`))) +
xlab("Sale Year") + ylab("Avg. Price") +
scale_x_continuous(breaks = scales::pretty_breaks(length(mean.year.price$`Sale Year`))) +
ggtitle("NYC Avg. Real Estate Price by Year")
year.price.plot
mean.year.borough.price <- avg.sale.price.by(dat, c(sale.year.name, borough.name))
setorderv(x = mean.year.borough.price, cols = "Sale Year", order = 1)
mean.year.borough.price <- mean.year.borough.price %>% mutate(`Fixed Borough` = forcats::fct_reorder2(`Fixed Borough`, `Sale Year`, `Avg. Price`))
year.borough.price.plot <- ggplot(mean.year.borough.price, aes(`Sale Year`, as.integer(`Avg. Price`), color = `Fixed Borough`)) +
geom_line(size = 1) + geom_point(aes(`Sale Year`,as.integer(`Avg. Price`))) +
xlab("Sale Year") + ylab("Avg. Price") + labs(color = "Borough") +
scale_x_continuous(breaks = scales::pretty_breaks(length(mean.year.price$`Sale Year`))) +
ggtitle("NYC Avg. Real Estate Price by Borough and Year")
year.borough.price.plot
box.borough.2017 <- dat[get(sale.year.name) == 2017]
box.borough.2017$`Sale Year` <- as.factor(box.borough.2017$`Sale Year`)
box.borough.2017.plot <- ggplot(box.borough.2017, aes(x = reorder(`Fixed Borough`, -1*`Log Price`, FUN=median), y = `Log Price`)) +
geom_boxplot() +
xlab("Borough") + ylab("Log Sale Price") + ggtitle("2017 by Borough") +
theme(plot.title = element_text(hjust = 0.5))
box.borough.2017.plot
box.borough.2003 <- dat[get(sale.year.name) == 2003]
box.borough.2003$`Sale Year` <- as.factor(box.borough.2003$`Sale Year`)
box.borough.2003.plot <- ggplot(box.borough.2003, aes(x = reorder(`Fixed Borough`, -1*`Log Price`, FUN=median), y = `Log Price`)) +
geom_boxplot() +
xlab("Borough") + ylab("Log Sale Price") + ggtitle("2003 by Borough") +
theme(plot.title = element_text(hjust = 0.5))
box.borough.2003.plot
library(choroplethr)
library(choroplethrZip)
install.packages(choroplethrZip)
install.packages("choroplethrZip")
library(choroplethrZip)
install_github('arilamstein/choroplethrZip@v1.4.0')
library(devtools)
install_github('arilamstein/choroplethrZip@v1.4.0')
View(all.data)
library(choroplethrZip)
?zip.regions
data(zip.regions)
head(zip.regions)
data("df_pop_zip")
View(df_pop_zip)
zip.prices <- all.data[, c(get(zip.name), get(sale.price.name))]
zip.prices <- as.data.table(all.data[, c(get(zip.name), get(sale.price.name))])
View(zip.prices)
all.dat[, c(zip.name, sale.price.name)]
all.data[, c(zip.name, sale.price.name)]
all.data[, .(zip.name, sale.price.name)]
all.data[, .(eval(zip.name), eval(sale.price.name))]
keep_cols = c(zip.name, sale.price.name)
keep_cols
all.data[, ..keep_cols]
all.data[, ..keep_cols]
zip.prices <- all.data[, ..keep_cols]
View(zip.prices)
View(df_pop_zip)
colnames(zip.prices) <- c("region", "value")
keep_cols = c(zip.name, sale.price.name)
zip.prices <- all.data[, ..keep_cols]
colnames(zip.prices) <- c("region", "value")
zip_choropleth(zip.prices,
county_zoom = zip.prices$region,
title       = "2012 New York City ZCTA Population Estimates",
legend      = "Population")
zip.prices <- zip.prices[, np.mean(value), by = region]
zip.prices <- zip.prices[, mean(value, na.rm = TRUE), by = region]
keep_cols = c(zip.name, sale.price.name)
zip.prices <- all.data[, ..keep_cols]
zip.prices <- zip.prices[, mean(value, na.rm = TRUE), by = zip.name]
zip.prices <- zip.prices[, mean(get(sale.price.name), na.rm = TRUE), by = zip.name]
colnames(zip.prices) <- c("region", "value")
zip_choropleth(zip.prices,
county_zoom = zip.prices$region,
title       = "2012 New York City ZCTA Population Estimates",
legend      = "Population")
bad_zips <- c(0)
nyc_zips <- setdiff(zip.prices$region, bad_zips)
nyc_zips
zip.prices <- zip.prices[region %in% nyc_zips,]
View(zip.prices)
zip_choropleth(zip.prices,
county_zoom = zip.prices$region,
title       = "2012 New York City ZCTA Population Estimates",
legend      = "Population")
zip_choropleth(zip.prices,
title       = "2012 New York City ZCTA Population Estimates",
legend      = "Population")
zip_choropleth(zip.prices,
zip_zoom = zip.prices$region,
title       = "2012 New York City ZCTA Population Estimates",
legend      = "Population")
self$map.df$region
df.regions
zip.regions
zip.regions$region
keep_cols = c(zip.name, sale.price.name)
zip.prices <- all.data[, ..keep_cols]
zip.prices <- zip.prices[, mean(get(sale.price.name), na.rm = TRUE), by = zip.name]
colnames(zip.prices) <- c("region", "value")
zip.prices <- zip.prices[region %in% zip.regions$region,]
zip_choropleth(zip.prices,
zip_zoom = zip.prices$region,
title       = "2012 New York City ZCTA Population Estimates",
legend      = "Population")
zip.prices$value <- as.integer(zip.prices$value)
View(zip.prices)
zip.prices <- zip.prices[value > 0,]
keep_cols = c(zip.name, sale.price.name)
zip.prices <- all.data[, ..keep_cols]
zip.prices <- zip.prices[, mean(get(sale.price.name), na.rm = TRUE), by = zip.name]
colnames(zip.prices) <- c("region", "value")
zip.prices$value <- as.integer(zip.prices$value)
zip.prices <- zip.prices[region %in% zip.regions$region,]
zip.prices <- zip.prices[value > 0,]
zip_choropleth(zip.prices,
zip_zoom = zip.prices$region,
title       = "2012 New York City ZCTA Population Estimates",
legend      = "Population")
nyc_zips <- zip.prices[, region]
nyc_zips
keep_cols = c(zip.name, sale.price.name)
zip.prices <- all.data[, ..keep_cols]
zip.prices <- zip.prices[, mean(get(sale.price.name), na.rm = TRUE), by = zip.name]
colnames(zip.prices) <- c("region", "value")
zip.prices$value <- as.integer(zip.prices$value)
zip.prices <- zip.prices[region %in% zip.regions$region,]
zip.prices <- zip.prices[value > 0,]
nyc_zips <- zip.prices[, region]
zip_choropleth(zip.prices,
zip_zoom = nyc_zips,
title       = "2012 New York City ZCTA Population Estimates",
legend      = "Population")
keep_cols = c(zip.name, sale.price.name)
zip.prices <- all.data[, ..keep_cols]
zip.prices <- zip.prices[, mean(get(sale.price.name), na.rm = TRUE), by = zip.name]
colnames(zip.prices) <- c("region", "value")
zip.prices$value <- as.numeric(zip.prices$value)
zip.prices <- zip.prices[region %in% zip.regions$region,]
zip.prices <- zip.prices[value > 0,]
nyc_zips <- zip.prices[, region]
zip_choropleth(zip.prices,
zip_zoom = nyc_zips,
title       = "2012 New York City ZCTA Population Estimates",
legend      = "Population")
keep_cols = c(zip.name, sale.price.name)
zip.prices <- all.data[, ..keep_cols]
zip.prices <- zip.prices[, mean(get(sale.price.name), na.rm = TRUE), by = zip.name]
colnames(zip.prices) <- c("region", "value")
zip.prices$value <- as.numeric(zip.prices$value)
zip.prices$region <- as.character(zip.prices$region)
zip.prices <- zip.prices[region %in% zip.regions$region,]
zip.prices <- zip.prices[value > 0,]
nyc_zips <- zip.prices[, region]
zip_choropleth(zip.prices,
zip_zoom = nyc_zips,
title       = "2012 New York City ZCTA Population Estimates",
legend      = "Population")
keep_cols = c(zip.name, sale.price.name)
zip.prices <- all.data[, ..keep_cols]
zip.prices <- zip.prices[, mean(get(sale.price.name), na.rm = TRUE), by = zip.name]
colnames(zip.prices) <- c("region", "value")
zip.prices$value <- as.numeric(zip.prices$value)
zip.prices$region <- as.character(zip.prices$region)
zip.prices <- zip.prices[region %in% zip.regions$region,]
zip.prices <- zip.prices[value > 0,]
zip_choropleth(zip.prices,
zip_zoom = zip.prices$region,
title       = "2012 New York City ZCTA Population Estimates",
legend      = "Population")
View(dat)
keep_cols = c(zip.name, sale.price.name)
zip.prices <- dat[get(sale.year.name) == 2017, ..keep_cols]
zip.prices <- zip.prices[, mean(get(sale.price.name), na.rm = TRUE), by = zip.name]
colnames(zip.prices) <- c("region", "value")
zip.prices$value <- as.numeric(zip.prices$value)
zip.prices$region <- as.character(zip.prices$region)
zip.prices <- zip.prices[region %in% zip.regions$region,]
zip.prices <- zip.prices[value > 0,]
zip_choropleth(zip.prices,
zip_zoom = zip.prices$region,
title       = "2017 Average Sale Price",
legend      = "Average Sale Price")
box.borough.2017 <- dat[get(sale.year.name) == 2017]
box.borough.2017$`Sale Year` <- as.factor(box.borough.2017$`Sale Year`)
box.borough.2017.plot <- ggplot(box.borough.2017, aes(x = reorder(`Fixed Borough`, -1*`Log Price`, FUN=median), y = `Log Price`)) +
geom_boxplot() +
xlab("Borough") + ylab("Log Sale Price") + ggtitle("2017 by Borough") +
theme(plot.title = element_text(hjust = 0.5))
box.borough.2017.plot
box.borough.2003 <- dat[get(sale.year.name) == 2003]
box.borough.2003$`Sale Year` <- as.factor(box.borough.2003$`Sale Year`)
box.borough.2003.plot <- ggplot(box.borough.2003, aes(x = reorder(`Fixed Borough`, -1*`Log Price`, FUN=median), y = `Log Price`)) +
geom_boxplot() +
xlab("Borough") + ylab("Log Sale Price") + ggtitle("2003 by Borough") +
theme(plot.title = element_text(hjust = 0.5))
box.borough.2003.plot
rm(list = ls())
library(data.table)
library(tidyverse)
library(extracat)
library(lubridate)
library(choroplethr)
library(choroplethrZip)
all.data <- fread("Data/NYCRealEstateFullData.csv")
avg.sale.price.by <- function(data, by.column.names){
mean.price <- data[, .(`Avg. Price` = mean(get(sale.price.name), na.rm=TRUE)), by = by.column.names]
return (mean.price)
}
old.borough.name <- "BOROUGH"
borough.name <- "Fixed Borough"
neighborhood.name <- "NEIGHBORHOOD"
building.class.name <- "BUILDING CLASS CATEGORY"
tax.class.name <- "TAX CLASS AT PRESENT"
block.name <- "BLOCK"
lot.name <- "LOT"
easement.name <- "EASE-MENT"
building.class.present.name <- "BUILDING CLASS AT PRESENT"
address.name <- "ADDRESS"
apartment.number.name <- "APARTMENT NUMBER"
zip.name <- "ZIP CODE"
residential.name <- "RESIDENTIAL UNITS"
commercial.name <- "COMMERCIAL UNITS"
total.units.name <- "TOTAL UNITS"
land.square.feet.name <- "LAND SQUARE FEET"
gross.square.feet.name <- "GROSS SQUARE FEET"
year.built.name <- "YEAR BUILT"
tax.class.sale.name <- "TAX CLASS AT TIME OF SALE"
building.class.sale.name <- "BUILDING CLASS AT TIME OF SALE"
sale.price.name <- "SALE PRICE"
sale.date.name <- "SALE DATE"
sale.year.name <- "Sale Year"
log.price.name <- "Log Price"
colSums(is.na(all.data))
visna(all.data, sort = "b")
all.data$`EASE-MENT` <- NULL
all.data$`APARTMENT NUMBER` <- NULL
all.data[get(sale.price.name) == 0, .N]
all.data[get(sale.price.name) < 50000, .N]
# also taking the log for future graphing
all.data <- all.data[, `Log Price` := log(get(sale.price.name))]
dat <- all.data[get(sale.price.name) > 50000]
dat <- dat[, `Sale Year` := year(get(sale.date.name))]
mean.year.price <- avg.sale.price.by(dat, c(sale.year.name))
setorderv(x = mean.year.price, cols = "Sale Year", order = 1)
year.price.plot <- ggplot(mean.year.price, aes(`Sale Year`, as.integer(`Avg. Price`))) +
geom_line(size = 1) + geom_point(aes(`Sale Year`,as.integer(`Avg. Price`))) +
xlab("Sale Year") + ylab("Avg. Price") +
scale_x_continuous(breaks = scales::pretty_breaks(length(mean.year.price$`Sale Year`))) +
ggtitle("NYC Avg. Real Estate Price by Year")
year.price.plot
mean.year.borough.price <- avg.sale.price.by(dat, c(sale.year.name, borough.name))
setorderv(x = mean.year.borough.price, cols = "Sale Year", order = 1)
mean.year.borough.price <- mean.year.borough.price %>% mutate(`Fixed Borough` = forcats::fct_reorder2(`Fixed Borough`, `Sale Year`, `Avg. Price`))
year.borough.price.plot <- ggplot(mean.year.borough.price, aes(`Sale Year`, as.integer(`Avg. Price`), color = `Fixed Borough`)) +
geom_line(size = 1) + geom_point(aes(`Sale Year`,as.integer(`Avg. Price`))) +
xlab("Sale Year") + ylab("Avg. Price") + labs(color = "Borough") +
scale_x_continuous(breaks = scales::pretty_breaks(length(mean.year.price$`Sale Year`))) +
ggtitle("NYC Avg. Real Estate Price by Borough and Year")
year.borough.price.plot
box.borough.2017 <- dat[get(sale.year.name) == 2017]
box.borough.2017$`Sale Year` <- as.factor(box.borough.2017$`Sale Year`)
box.borough.2017.plot <- ggplot(box.borough.2017, aes(x = reorder(`Fixed Borough`, -1*`Log Price`, FUN=median), y = `Log Price`)) +
geom_boxplot() +
xlab("Borough") + ylab("Log Sale Price") + ggtitle("2017 by Borough") +
theme(plot.title = element_text(hjust = 0.5))
box.borough.2017.plot
box.borough.2003 <- dat[get(sale.year.name) == 2003]
box.borough.2003$`Sale Year` <- as.factor(box.borough.2003$`Sale Year`)
box.borough.2003.plot <- ggplot(box.borough.2003, aes(x = reorder(`Fixed Borough`, -1*`Log Price`, FUN=median), y = `Log Price`)) +
geom_boxplot() +
xlab("Borough") + ylab("Log Sale Price") + ggtitle("2003 by Borough") +
theme(plot.title = element_text(hjust = 0.5))
box.borough.2003.plot
keep_cols = c(zip.name, sale.price.name)
data(zip.regions)
zip.prices <- dat[get(sale.year.name) == 2017, ..keep_cols]
zip.prices <- zip.prices[, mean(get(sale.price.name), na.rm = TRUE), by = zip.name]
colnames(zip.prices) <- c("region", "value")
zip.prices$value <- as.numeric(zip.prices$value)
zip.prices$region <- as.character(zip.prices$region)
zip.prices <- zip.prices[region %in% zip.regions$region,]
zip.prices <- zip.prices[value > 0,]
zip_choropleth(zip.prices,
zip_zoom = zip.prices$region,
title       = "2017 Average Sale Price",
legend      = "Average Sale Price")
unique(all.data[, get(sale.year.name)])
all.data <- all.data[, `Sale Year` := year(get(sale.date.name))]
unique(all.data[, get(sale.year.name)])
year.variables <- unique(all.data[, get(sale.year.name)])
year.variables
year.variables[1]
length(year.variables)
year.variables[15]
sort(year.variables)
sort(year.variables)[15]
rm(list=ls())
all.data <- fread("Data/NYCRealEstateFullData.csv", verbose = FALSE)
setwd("~/Columbia/AppliedDS/FinalProject/AppliedDataScienceFinalProject")
setwd("~/Columbia/AppliedDS/FinalProject/AppliedDataScienceFinalProject")
all.data <- fread("Data/NYCRealEstateFullData.csv", verbose = FALSE)
old.borough.name <- "BOROUGH"
borough.name <- "Fixed Borough"
neighborhood.name <- "NEIGHBORHOOD"
building.class.name <- "BUILDING CLASS CATEGORY"
tax.class.name <- "TAX CLASS AT PRESENT"
block.name <- "BLOCK"
lot.name <- "LOT"
easement.name <- "EASE-MENT"
building.class.present.name <- "BUILDING CLASS AT PRESENT"
address.name <- "ADDRESS"
apartment.number.name <- "APARTMENT NUMBER"
zip.name <- "ZIP CODE"
residential.name <- "RESIDENTIAL UNITS"
commercial.name <- "COMMERCIAL UNITS"
total.units.name <- "TOTAL UNITS"
land.square.feet.name <- "LAND SQUARE FEET"
gross.square.feet.name <- "GROSS SQUARE FEET"
year.built.name <- "YEAR BUILT"
tax.class.sale.name <- "TAX CLASS AT TIME OF SALE"
building.class.sale.name <- "BUILDING CLASS AT TIME OF SALE"
sale.price.name <- "SALE PRICE"
sale.date.name <- "SALE DATE"
sale.year.name <- "Sale Year"
log.price.name <- "Log Price"
year.variables <- unique(all.data[, get(sale.year.name)])
all.data <- all.data[, `Sale Year` := year(get(sale.date.name))]
keep_cols = c(zip.name, sale.price.name)
data(zip.regions)
zip.prices <- all.data[get(sale.year.name) == input$year_variable, ..keep_cols]
zip.prices <- zip.prices[, mean(get(sale.price.name), na.rm = TRUE), by = zip.name]
colnames(zip.prices) <- c("region", "value")
zip.prices$value <- as.numeric(zip.prices$value)
zip.prices$region <- as.character(zip.prices$region)
zip.prices <- zip.prices[region %in% zip.regions$region,]
zip.prices <- zip.prices[value > 0,]
zip_choropleth(zip.prices,
zip_zoom = zip.prices$region,
title       = "2017 Average Sale Price",
legend      = "Average Sale Price")
all.data[get(sale.year.name) == 2017]
year.variables
year.variables <- unique(all.data[, get(sale.year.name)])
year.variables
keep_cols = c(zip.name, sale.price.name)
data(zip.regions)
zip.prices <- all.data[get(sale.year.name) == input$year_variable, ..keep_cols]
zip.prices <- all.data[get(sale.year.name) == 2017, ..keep_cols]
zip.prices <- zip.prices[, mean(get(sale.price.name), na.rm = TRUE), by = zip.name]
colnames(zip.prices) <- c("region", "value")
zip.prices$value <- as.numeric(zip.prices$value)
zip.prices$region <- as.character(zip.prices$region)
zip.prices <- zip.prices[region %in% zip.regions$region,]
zip.prices <- zip.prices[value > 0,]
zip_choropleth(zip.prices,
zip_zoom = zip.prices$region,
title       = "2017 Average Sale Price",
legend      = "Average Sale Price")
